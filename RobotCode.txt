#include "p24HJ128GP502.h"  //Include device library file
#include "timer.h"          //Include TIMER library file
#include "uart.h"           //Include UART library file
#include "adc.h"            //Include ADC library file

#define BUFF_SIZE 32
#define SERVO_MAX 3848
#define SERVO_MIN 3036

//Configuration Bits
_FOSCSEL(FNOSC_FRC & IESO_OFF);
_FOSC	(POSCMD_NONE & OSCIOFNC_ON & IOL1WAY_OFF & FCKSM_CSDCMD);
_FWDT	(FWDTEN_OFF & WINDIS_OFF & WDTPRE_PR32 & WDTPOST_PS1);
_FPOR	(FPWRT_PWR1 & ALTI2C_ON);
_FICD	(ICS_PGD1 & JTAGEN_OFF);

//Function prototypes
void InitIO (void);									
void InitTimer (void);				
void InitUART(void);
void ADC (void);				
void ProcessData(void);
void SendData(void);
long Map(long x, long in_min, long in_max, long out_min, long out_max);
void Shutdown(void);
void drive(void);

//Global variables
unsigned int ServoMid = 0;
unsigned int Photocell = 0;                 //Variable sent to the Robot PIC24H microcontroller via HC-05 Bluetooth Module
unsigned int ONTimeR = 0;                    //Variable used to control the RC Servo Motor's Position			
unsigned int ONTimeL = 0;
unsigned int ONTimeReceived = 0;            //Variable used to store value of ONTime while it is being received and mapped
unsigned int OFFTime = 3100;                //changed from 3000 to 3100 for 20 ms period(revised oct 30 Adam Nartiss)
unsigned int TmrState1 = 0;   //Variable used to store the state of the interrupt(modified oct 29 Adam Nartiss				
unsigned int TmrState2= 0;      //Variable used to store TmrState2 (modified oct 29 Adam Nartiss)
unsigned int MotorPin = 0;
unsigned int TmrVal = 0;                    //Variable used to store the value used to setup Timer1 which controls
                                            //the ON and OFF time by utilizing Timer1's Interrupt
unsigned int DriveState = 0;

unsigned char SendDataArray[BUFF_SIZE];     //Array to store the data to be transmitted through UART1 TX pin
unsigned char ReceiveDataArray[BUFF_SIZE];  //Array to store the data received from UART1 RX pin
unsigned char ReceivedChar = 0;             //Variable used to store the last byte received from UART1 RX pin
int i;                                      //Variable used to index through arrays
int uartcount = 0;                          //The current array index of the received data from the UART RX pin

unsigned int CommsLossCount = 0;            //Store the number of times there was a communication loss
unsigned short Communicating;               //Store the value ReceiveDataArray[20], if 1 then new data received

int main (void)
{
	InitIO();           //Call InitIO which configures the input and output pins
	InitTimer();		//Call InitTimer which configures Timer1 for controlling the RC Servo Motor
	InitUART();         //Call InitUART which configures the UART hardware module for communications
                        //with the HC-05 Bluetooth Module
    ServoMid = (SERVO_MAX - SERVO_MIN)/2;
	
	for (i=0; i<BUFF_SIZE; i++) SendDataArray[i] = 0;   //Initialize the array of chars to zero
	SendDataArray[0] = 's';                             //Set first element as 's' for data synchronization
                                                        //and for framing error checking
	while (1)           //Infinite loop
	{            
        ProcessData();	//Call ProcessData to update variables for UART1 Communications
        SendData(); 	//Call SendData to send data through the UART1 TX pin to HC-05 Bluetooth Module

        if(CommsLossCount>200){     //If communication loss persists, we assume complete loss of communication
            Shutdown();             //You must define code in Shutdown function below
        }
        else{                       //If there is communication, then the following code block will be executed
                                    //This is where all your functions should be executed
            LATAbits.LATA4 = 0;     //Turn off Communication loss LED
            ADC();                  //Call ADC which configures and reads AN4
            drive();
        }            
    }
}
void drive (void){
    //Motor 1 right, motor 2 left
    //Right motor forward
    if (ONTimeR > ServoMid + 10){
        LATBbits.LATB10 = 1;
        LATBbits.LATB13 = 1;
    }
    //Right Motor Backward 
    else if (ONTimeR < ServoMid - 10){
        LATBbits.LATB10 = 1;
        LATBbits.LATB13 = 0;
    }
    //Right motor off
    else{
        LATBbits.LATB10 = 0;
    }
    
    //Left motor forward
    if (ONTimeL > ServoMid + 10){
        LATBbits.LATB15 = 1;
        LATBbits.LATB11 = 1;
    }
    //Left Motor backward
    else if (ONTimeL < ServoMid - 10){
        LATBbits.LATB15 = 1;
        LATBbits.LATB11 = 0;
    }
    //Left motor off
    else {
        LATBbits.LATB15 = 0;
    }
}
void InitIO (void)
{
    TRISBbits.TRISB15 = 0;  //Turn motor 2 on or off
    TRISBbits.TRISB14 = 0;  //PWM output for right motor
    TRISBbits.TRISB13 = 0;  //Direction output for motor 1
    TRISBbits.TRISB12 = 0;  //PWM output for motor 2
    TRISBbits.TRISB11 = 0;  //Direction for motor 2
    TRISBbits.TRISB10 = 0;  //TURN motors 1 on or off
	TRISBbits.TRISB2 = 1;	//Set RB2 as input for Photocell connected to AN4
    TRISAbits.TRISA4 = 0;   //Set RA4 as output for LED to indicate communication loss
    

	//RP8 TO U1RX           //Set the RP8 pin to UART1 RX pin
	RPINR18bits.U1RXR = 8;	//See TABLE 11-1: SELECTABLE INPUT SOURCES (MAPS INPUT TO FUNCTION),Page 136
                            //and REGISTER 11-8: RPINR18: PERIPHERAL PIN SELECT INPUT REGISTER 18,Page 146

    CNPU2bits.CN22PUE = 1;	//Enable weak pull-up of Receive pin CN22 (Corresponds to RP8)
                            //This is needed for v1.06 Bluetooth boards to pull up the receive line

	//RP9 TO U1TX           //Set the RP9 pin to UART1 TX pin
	RPOR4bits.RP9R = 3;     //See TABLE 11-2: OUTPUT SELECTION FOR REMAPPABLE PIN (RPn), Page 137
                            //and REGISTER 11-19: RPOR4: PERIPHERAL PIN SELECT OUTPUT REGISTERS 4, Page 154
}
/*****************************************************************************************************************/
void InitTimer(void)
{                                                   //Prescaler = 1:8 and Period = 0x0FFF
	OpenTimer1 (T1_ON & T1_PS_1_8 & T1_SYNC_EXT_OFF & T1_SOURCE_INT & T1_GATE_OFF & T1_IDLE_STOP, 0x0FFF);						
	ConfigIntTimer1 (T1_INT_PRIOR_1 & T1_INT_ON);	//Set interrupt priority and turn Timer1 interrupt on
}
/*****************************************************************************************************************/
void InitUART(void)
{
	IEC0bits.U1TXIE = 0;            //Disable UART1 TX interrupt
    IFS0bits.U1RXIF = 0;            //Clear the Receive Interrupt Flag
	U1MODEbits.STSEL = 0;           //1 Stop bit
	U1MODEbits.PDSEL = 0;           //8-bit data, no parity
	U1MODEbits.BRGH = 0;            //16x baud clock, Standard mode
	U1MODEbits.URXINV = 0;          //Idle State 1 for RX pin
	U1MODEbits.ABAUD = 0;           //Auto-Baud Disabled
	U1MODEbits.RTSMD = 1;           //Simplex Mode, no flow control
	U1MODEbits.UARTEN = 1;          //Enable UART1
	U1STAbits.UTXISEL0 = 0;         //Interrupt after one TX character is transmitted
	U1STAbits.UTXISEL1 = 0;         //Interrupt after one TX character is transmitted
	U1STAbits.UTXEN = 1;            //Enable UART1 to control TX pin
	U1BRG = 1;                      //BAUD Rate Setting for 115200
	IEC0bits.U1RXIE = 1;            //Enable UART1 RX interrupt
}
/*****************************************************************************************************************/
void ADC (void)
// For more information on PIC24H ADC Peripheral Module Library refer to link below:
// file:///C:/Program%20Files%20%28x86%29/Microchip/xc16/v1.32/docs/periph_libs/dsPIC33F_PIC24H_dsPIC33E_PIC24E_ADC_Library_Help.htm
{                                   //12-bit sampling
                                    //Use dedicated ADC RC oscillator
                                    //Automatically start new conversion after previous
                                    //Use Avdd and Avss as reference levels
	OpenADC1(ADC_MODULE_OFF & ADC_AD12B_12BIT & ADC_FORMAT_INTG & ADC_CLK_AUTO & ADC_AUTO_SAMPLING_ON,
                ADC_VREF_AVDD_AVSS & ADC_SCAN_OFF & ADC_ALT_INPUT_OFF,
		ADC_SAMPLE_TIME_31 & ADC_CONV_CLK_INTERNAL_RC,
		ADC_DMA_BUF_LOC_1,
		ENABLE_AN4_ANA,
		0,		
		0,
		0);
                                    //Select AN4
	SetChanADC1(0, ADC_CH0_NEG_SAMPLEA_VREFN & ADC_CH0_POS_SAMPLEA_AN4);
	AD1CON1bits.ADON = 1;           //Turn on ADC hardware module
	while (AD1CON1bits.DONE == 0);	//Wait until conversion is done
	Photocell = ReadADC1(0);        //Photocell = converted results
	AD1CON1bits.ADON = 0;           //Turn off ADC hardware module
}
/*****************************************************************************************************************/
void ProcessData(void)
{	
	SendDataArray[1] = (Photocell >> 8);                                //Populate the array one byte at a time
	SendDataArray[2] = Photocell;
    
    
	ONTimeReceived = (ReceiveDataArray[1] << 8) + ReceiveDataArray[2];  //Build integer from array of bytes
	ONTimeReceived = Map(ONTimeReceived,0,4095,SERVO_MIN,SERVO_MAX);    //Make sure the RC Servo Motor values are                                                                       //within its limits
    ONTimeR = ONTimeReceived;    //This is to ensure the interrupt handler does not use a value of ONTime that      
    if (ONTimeR < ServoMid){
        ONTimeR = ONTimeR + (ServoMid - ONTimeR);
    }
    ONTimeReceived = (ReceiveDataArray[3] << 8) + ReceiveDataArray[4];  //Build integer from array of byte, to recieve bluetooth input for DC motor                                                                       //(revised oct 30 Adam Nartiss)
	ONTimeReceived = Map(ONTimeReceived,0,4095,SERVO_MIN,SERVO_MAX);    //Make sure the DC Motor values are((revised oct 30 Adam Nartiss))                                                                      //within its limits
    ONTimeL = ONTimeReceived;                  //Ensures interrupt handler does not use a value of ONTime that has not been fully calculated
    if (ONTimeL < ServoMid){
        ONTimeL = ONTimeL + (ServoMid - ONTimeL);
    }
    DriveState = (ReceiveDataArray[5] << 8) + ReceiveDataArray[6];
    
    SendDataArray[20] = 1;                  //Sending a 1 for controller to check for communication
    Communicating = ReceiveDataArray[20];   //Checking if the controller sent us a 1, which will let us know if we
                                            //have communication    
    
    if(Communicating){                      //If there is communication, reset the communication loss counter
        CommsLossCount = 0;
    }
    else if(!Communicating){                //If there is an interruption (i.e. single loss of communication),
        CommsLossCount++;                   //then increment the communication loss counter
    }
    ReceiveDataArray[20] = 0;               //Reset the communication to 0, If next time we look at it and it's 
                                            //still 0, then no communication. If next time we look at it and
                                            //controller has changed it to 1, then we have communication
}
/*****************************************************************************************************************/
void SendData(void)
{
	for (i=0;i<BUFF_SIZE;i++)           //Index through the array from the start to the end of the array 
	{                                   //Note: The first byte is an ASCII Character "s" to denote the start
		WriteUART1(SendDataArray[i]);	//Send one byte of the data array to UART TX Pin
		while(BusyUART1());             //Wait while the UART1 is busy
	}
}
/*****************************************************************************************************************/
long Map(long x, long in_min, long in_max, long out_min, long out_max)
{
    return (x-in_min)*(out_max-out_min)/(in_max-in_min)+out_min;
}
/*****************************************************************************************************************/
void Shutdown(void){    
    LATAbits.LATA4 = 1;     //Turn on communication error LED 
}
/*****************************************************************************************************************/
void __attribute__((interrupt, auto_psv)) _T1Interrupt(void)	
{
	DisableIntT1;               //Disable Timer1 interrupt 

//This if statement is used to control the next state of the interrupt
    //if (LATBbits.LATB15 == 0){
    //For RB6
        if (TmrState1 == 0)
        {
            LATBbits.LATB14 = 1;     //Set high signal for RB6
            LATBbits.LATB12 = 0;    //sets low signal to the dc motor(modified oct 29 Adam Nartiss)
            T1CONbits.TCKPS = 1;	//Change prescaler to 1:8
            TmrVal = ONTimeR;        //Set TmrVal = ONTime
            TmrState1 = 1;           //Set next state for the interrupt
        }
        else if (TmrState1 == 1)
        {
            LATBbits.LATB14 = 0;     //Set low signal for RB6(modified oct 29 Adam Nartiss)
            LATBbits.LATB12 = 1;    //sets the motor dc motor to rb15 and sets high signal(modified oct 29 Adam Nartiss))
            TmrVal = ONTimeL;       //Set TmrVal = OFFTime
            T1CONbits.TCKPS = 1;	//Change prescaler to 1:64
            TmrState1 = 2;          //Set next state for the interrupt changed to 2(modified oct 29 Adam Nartiss)
            //MotorPin = 1;
        }	
        else if (TmrState1 == 2){
            LATBbits.LATB12 = 0;    //stes dc motor to low(modified oct 29 Adam Nartiss)
            TmrVal = OFFTime;       //Set TmrVal = OFFTime
            T1CONbits.TCKPS = 2;	//Change prescaler to 1:64
            TmrState1 = 0;          //Set next state for the interrupt
            //MotorPin = 1;
        }
    
	WriteTimer1(TmrVal);		//Setup Timer1 with the appropriate value to set the interrupt time
	IFS0bits.T1IF = 0;          //Reset Timer1 interrupt flag
	EnableIntT1;                //Enable Timer1 interrupt
}
/*****************************************************************************************************************/
// UART1 Receive Interrupt
void __attribute__ ((interrupt, no_auto_psv)) _U1RXInterrupt(void) 
{
	DisableIntU1RX;             //Disable the UART1 receive interrupt
	IFS0bits.U1RXIF = 0;        //Reset the UART1 receive interrupt flag
	ReceivedChar = U1RXREG;     //Store the latest received character

//Need to synchronize the data being received by looking for the 's' which denotes the start of the array
    if ((uartcount == 0) && (ReceivedChar == 's'))  //Note: uartcount=0 until we receive a 's'
    {
        ReceiveDataArray[uartcount] = ReceivedChar; //Store 's' into the 0 element of the array
        uartcount++;                                //Increment array index for next byte being received
    }
    else if (uartcount != 0)
//Data has been synchronized; update the array of data being received until buffer size has been reached
    {
        ReceiveDataArray[uartcount] = ReceivedChar; //Update array with the latest data byte being received
        uartcount++;                                //Increment array index for next byte being received
        if (uartcount==BUFF_SIZE) uartcount=0;      //All data in array has been received
    }
     EnableIntU1RX;             //Enable the UART1 receive interrupt
}